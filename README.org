#+TITLE:     Django SAAS kit
#+AUTHOR:    Maciej Pasternacki
#+EMAIL:     maciej@pasternacki.net
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:nil LaTeX:nil skip:nil d:nil tags:not-in-toc

* Getting started
  To start the project, after cloning Git repository, run:

  1. make -C upstream/ init
  2. cd projects/main
  3. python manage.py syncdb
  4. python manage.py loaddata ../../exampledata.json
  5. python manage.py runserver 8001
  
  (in other shell)
  6. cd projects/subdomains
  7. python manage.py runserver

  Project includes as Git sumodules or downloads from
  upstream/Makefile all needed Django applications; only requirements
  are Python (2.5 or higher, but may work on earlier versions of
  Python) and stable release of Django (1.0.2 at this moment).

  To download dependencies (step 1), following programs are needed:
  - make,
  - git,
  - mercurial,
  - subversion,
  - wget,
  - tar accepting "-j" option (any recent GNU tar).
* Overview
  Crowdsense Project Kit is a complete SAAS-type website template,
  ready for deployment.  It includes a set of integrated Django
  applications, ready to change sample templates, together with a
  Yahoo YUI-based CSS theme.  It is intended to be a SAAS equivalent
  of what [[http://pinaxproject.com][Pinax]] does for social websites, but glued together in
  different way: no virtualenv with locally used pip/easy_install, no
  project templates, single Git repository intended to be pulled from
  and forked to create a new project.

  Because of usage of symbolic links and some path mangling, kit is
  expected to run on POSIX systems (Linux, Mac OS X, others from UNIX
  family), and is expected NOT to run on Microsoft Windows (at least
  not without Cygwin).
* Code layout
** Third party code
   Directory =[[file:upstream/][upstream/]]= holds third-party and independently
   developed code.  Most of it are Django applications.  Code is
   downloaded primarily directly from version control systems, using
   specified tags/releases; if this is not available, stable archives
   are used.

   Third party code hosted in Git version control system is managed
   using git `submodule' feature (see =git help submodule=).  For
   other VC systems and stable archives, =[[file:upstream/Makefile][upstream/Makefile]]= defines
   desired release/tag numbers, repositories and commands for
   downloading.  This Makefile handles also initializing and updating
   git submodules.
*** Downloading third-party code
    To download third-party code (all code after first checkout, or
    added code after updating from git), run =make= command in
    =upstream/= directory (or =make -C upstream= from main dir, as in
    "Getting started" section).  Stamp files ensure that each package
    is downloaded only once.
*** Updating third-party code
    To update third-party code after desired version is changed:
    - for git submodules, simply run =git submodule update=, or
      =make= in =upstream/= directory that will run this command;
    - for archive-based downloading, =make= command in =upstream/=
      directory will handle the update process cleanly (possibly only
      leaving old archive/directory not deleted);
    - for other version control systems, no updating support is
      currently in place.  Either re-download by deleting the
      downloaded repository and related stamp file and issuing =make=
      command in =upstream/= directory, or issue update command in
      the repository by hand.
** Python path
   Directory =[[file:site-python/][site-python/]]= is configured by the project code to be
   on beginning of Python module search path.  It holds only symbolic
   links to actual Python modules, mostly those located in
   =upstream/=, but also to =settings.py= file (as
   =common_settings.py=) and to local custom code located in
   =crowdsense/= module.
** Local code
   Local code, packaged as single Django app (can grow to multiple
   apps/libraries if needed) is in =crowdsense/= directory, linked in
   =site-python/= as =crowdsense= Python module / Django app.
** Projects
   In =[[file:projects/][projects/]]= subdirectory, two Django projects are provided.
   The =main= project serves project's main site
   (marketing/info/signup/dashboard site, common for all accounts;
   think http://basecamphq.com/ marketing site for Basecamp).
   The =user_sites= project serves individual users' SAAS sites
   (think http://samplecompany.basecamphq.com/ individual Basecamp
   account).

   In these projects, =manage.py= file has been altered to have the
   =site-python/= directory (see /Python path/ earlier) as first
   entry in =sys.path=.  This way, not only it sees all the included
   apps, but they take precedence over whatever is installed in the
   system.  This may be cause of some warning messages (seen with
   django-registration), but these are nothing to worry about.

   For both projects, =project_dir/media/= subdirectory holds static
   files to be served.  Most of content is symlinks to upstream
   project media files.  When run in debug mode, these media are
   served under =/media/= URL, in production they should be served
   directly by a fast HTTP daemon (nginx, lighttpd, or apache) and
   =MEDIA_URL= setting should be change accordingly (see /Deployment/
   later).

   To speed up serving CSS and JavaScript files, django-compress app
   is used.  It consolidates and minifies all needed CSS and
   JavaScript to single files and uses a single file instead of many
   small, separate files.  Usually in production server is not able
   to write the consolidated files, which causes "permission denied"
   errors.  Before deploying, and after each upgrade,
   =python manage.py synccompress= command should be run to create
   consolidated CSS and JavaScript files.
*** Settings
    Shared settings are in top-level =settings.py= file; it is
    symlinked in =site-python/=, as =common_settings.py= and its
    contents are imported on top of both projects' =settings.py=
    files.  Projects' =settings.py= files hold only setting specific
    for each project.  To keep the database consistent, both packages
    should have the same list of apps; the only exception is Django
    admin, used only in =main= app (and this is why
    =manage.py syncdb= should be run from =main= app directory).
*** Templates
    Top-level =templates/= directory holds most of the default
    templates.  Project-level =templates/= directory holds
    project-specific templates which override top-level ones.
*** Sites
    Both projects use different sites from Django's "sites" framework
    (see http://docs.djangoproject.com/en/dev/ref/contrib/sites/);
    =main= project uses site with ID 1 (default: www.example.com),
    =user_sites= use site with ID 2 (default:
    usersites.example.com).  This allows to have separate static
    Pages for both projects.

* Default data set
  By loading exampledata.json, data is populated with:
  - Silver Membership monthly recurring plan, linked to Silver Member group,
    having ability to change muaccount's public status;
  - Gold Membership monthly recurring plan, linked to Gold Member group,
    having ability to set custom domain and change muaccount's public status
  - administrative interface user, login admin, password admin
  - free_user user, password "free", with no paid plan selected
  - silver_user user, password "silver", with silver plan selected
  - gold_user user, password "gold", with gold plan selected
  - muaccount of free_user with subdomain "free"
  - muaccount of silver_user with subdomain "silver"
  - muaccount of gold_user with custom domain "www.gold-account.com"
  - test1 user, password "test", with no plan selected, member of "free"
    and "silver" muaccount
  - test2 user, password "test", with no plan selected, member of
    "silver" and "gold" account
  - test3 user, password "test", with no plan selected, member of
    "gold" account
* List of third party code
** Django applications
*** Used
    Apps actually used by sample code.
**** django-authopenid
     Used for signup/login process.
     - http://bitbucket.org/benoitc/django-authopenid/wiki/Home
     - http://bitbucket.org/benoitc/django-authopenid/wiki/Getting_started
***** django-registration
      Used internally by django-authopenid.
      - http://bitbucket.org/ubernostrum/django-registration/wiki/Home
***** python-openid
      Python library for OpenID, used internally by django-authopenid.
      - http://openidenabled.com/python-openid/
**** django-compress
     Consolidates and minifies static CSS and JavaScript files.
     - http://github.com/pelme/django-compress/
     - http://code.google.com/p/django-compress/
     - http://code.google.com/p/django-compress/w/list
     - http://github.com/pelme/django-compress/tree/master/docs
**** django-debug-toolbar
     Toolbar that helps debugging Django code.
     - http://github.com/robhudson/django-debug-toolbar/
**** django-faq
     Used for frequently asked question list.
     - http://github.com/howiworkdaily/django-faq/
**** django-muaccounts
     Used for multi-user SAAS accounts.
     - http://github.com/CrowdSense/django-muaccounts/
**** django-page-cms
     Used for content management.
     - http://code.google.com/p/django-page-cms/
     - http://code.google.com/p/django-page-cms/w/list
***** django-mptt
      Django app for keeping tree structures in database, used
      internally by django-page-cms.
      - http://code.google.com/p/django-mptt/
***** html5lib
      Python library for HTML parsing, used internally by
      django-page-cms.
      http://code.google.com/p/html5lib/
***** django-tagging
      Tagging support, used by django-page-cms.
      - http://code.google.com/p/django-tagging/
**** django-perfect404
     A perfect 404 page, based on A List Apart's article.
     Used only when =DEBUG=False=.
     - http://github.com/svetlyak40wt/django-perfect404/
**** django-profiles
     Used for user profile management on main (shared/dashboard) site.
     - http://bitbucket.org/ubernostrum/django-profiles/wiki/Home
     - http://bitbucket.org/ubernostrum/django-profiles/src/tip/docs/overview.txt
     - http://bitbucket.org/ubernostrum/django-profiles/src/c21962558420/docs/views.txt
**** django-rosetta
     Used for translating and compiling i18n translation files from
     Django admin panel.
     - http://code.google.com/p/django-rosetta/
     - http://www.djangoproject.com/documentation/i18n/
**** django-subscription
     Used for user subscription plans/levels.
     - http://github.com/CrowdSense/django-subscription/
***** django-paypal
      Used by django-subscription for PayPal payments interface.
      - http://github.com/johnboxall/django-paypal/
**** django-uni-form
     Unified style for pretty form support.
     - http://code.google.com/p/django-uni-form/
     - http://github.com/pydanny/django-uni-form/
     - http://github.com/pydanny/django-uni-form/blob/master/docs/usage.txt
*** Currently unused
    Apps that are not currently used by any of sample code, but are
    included and ready to use.
**** django-ab
     A/B testing.
     - http://github.com/johnboxall/django-ab/
**** django-ajax-validation
     Add AJAX-based validation to custom forms.
     - http://github.com/alex/django-ajax-validation
     - http://github.com/alex/django-ajax-validation/blob/master/docs/usage.txt
     - http://github.com/alex/django-ajax-validation/blob/master/docs/serving-ajax-validation-media-server.txt
**** django-extensions
     Custom management extensions for Django.
     - http://code.google.com/p/django-command-extensions/
     - http://code.google.com/p/django-command-extensions/w/list
     - http://github.com/django-extensions/django-extensions/
     - http://github.com/django-extensions/django-extensions/tree/master/docs
**** django-filter
     A generic system for filtering Django QuerySets based on user
     selections
     - http://github.com/alex/django-filter/
     - http://github.com/alex/django-filter/tree/master/docs
**** django-mailer
     Used for e-mail queuing and management.
     - http://github.com/jtauber/django-mailer/
     - http://code.google.com/p/django-mailer/
     - http://github.com/jtauber/django-mailer/blob/master/docs/usage.txt
**** django-notification
     Used for user notification support.
     - http://github.com/jtauber/django-notification/
     - http://github.com/jtauber/django-notification/blob/master/docs/usage.txt
**** django-pipes
     Used for external API consumption, by (TBD) django-mashup.
     - http://github.com/mallipeddi/django-pipes/
**** django-piston
     Framework for creating externally accessible APIs.
     - http://bitbucket.org/jespern/django-piston/wiki/Home
     - http://bitbucket.org/jespern/django-piston/wiki/Documentation
     - http://bitbucket.org/jespern/django-piston/wiki/FAQ#faq
**** django-prepaid
     Used to support consumable, separately paid quotas (think prepaid
     phone minutes).
     - http://github.com/CrowdSense/django-prepaid/tree/master
**** django-quotas
     Used for numeric hard quotas based on regular Django permission
     system.
     - http://github.com/mpasternacki/django-quotas/
** Other code
*** yui-app-theme
    A generic, skinnable, Yahoo YUI-based layot for web applications.
    - http://clickontyler.com/yui-app-theme/
    - http://github.com/tylerhall/yui-app-theme/
* Runtime environment
  Project is expected to run on localhost, port 8000 (or any other
  port set in MUACCOUNTS_PORT).  For all sites to work correctly,
  following hosts must resolve to 127.0.0.1 (e.g. by adding entry in
  /etc/hosts): example.com www.example.com free.example.com
  silver.example.com gold.example.com www.gold-account.com. To deploy
  on standard port (80 for HTTP), comment out MUACCOUNTS_PORT setting.

  To succesfully use PayPal sandbox, you'll need to:
  - sign up for PayPal sandbox at http://developer.paypal.com/
  - configure PAYPAL_RECEIVER_EMAIL and possibly SUBSCRIPTION_PAYPAL_SETTINGS
    in project/settings.py
  - make sure your page is visible from outside world (necessary for IPN callbacks)
  - set your page's IP or root domain (MUACCOUNTS_ROOT_DOMAIN) and port, in form
    12.34.56.78:8000 (when deploying on standard port, set just IP or root domain),
    as `example.com' Site's domain name in admin panel, so that django-subscription
    can give correct IPN URL to PayPal.
  To run with live PayPal, you'll need to change {{form.sandbox}} to {{form.render}}
  in templates/subscription/subscription_detail.html and set PAYPAL_TEST to False in
  project/settings.py.
** Warnings at startup
   When some of dependencies are installed system-wide (especially if
   installed with easy_install), Django may issue warnings similar to
   one pasted below:

   :    Installing index for admin.LogEntry model
   :    Installing index for subscription.Transaction model
   :    /opt/local/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/simplejson-2.0.9-py2.5-macosx-10.5-i386.egg/simplejson/_speedups.py:3:
   :    UserWarning: Module registration was already imported from /Users/admin/Projects/django-saas-kit/site-python/registration/__init__.py, but /opt/local/lib/python2.5/site-packages/django_registration-0.7-py2.5.egg is being added to sys.path
   :     import sys, pkg_resources, imp
   :
   Such warnings are not important, since they only indicate that
   system-wide installation of django-registration is not used, and
   project-local checkout is used instead.
